
pipeline {
    agent any
    
    environment {
        ang_dir = 'angular'
        java_dir = 'java/jtqj'
        src_dir = 'angular/src'
        sonarEnv = 'sonarqube'
        
    }
    tools{
        maven 'mvn'
        nodejs 'NodeJs'
        SonarQube scanner 'SonarQube scanner'
    }
    stages {        
        stage('Install dependencies') {
            steps {
                dir(ang_dir){
                    //sh 'yarn --network-timeout 100000'
                    sh 'npm install'
                }
            }
        }
        
        stage('SonarQube Analysis Front') {
            steps{
                script {
                    dir(ang_dir) {
                        
                        withSonarQubeEnv(sonarEnv) {
                            sh """
                                ${scannerHome}/bin/sonnar-scanner -x \
                                    -Dsonar.host.url=http://127.0.0.1:9000/ \
                                    -Dsonar.projectKey=jtq_angular \
                                    -Dsonar.projectName=jtq_angular \
                                    -Dsonar.sources=${src_dir}
                            """
                        }
                    }
                }
            }
        }
        
        /*
        stage('Build frontend') {
            steps {
                dir(ang_dir){
                    sh 'npm run build'
                }
            }
        }
        */
        /*
        stage('get ip sonarqube'){
            steps {
                sh 'docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' sonarqube'
            }
        }
        */
        stage('Build backend') {
            steps {
                dir(java_dir){
                    sh 'mvn clean install -Dmaven.test.skip=true'
                    }
                }
            
        }
        stage('Test backend') {
            steps {
                dir(java_dir){
                    sh 'mvn clean test'
                }
            }
        }   

        stage('SonarQube Analysis Back') {
            steps{
                script{
                    dir(java_dir){
                        withSonarQubeEnv(sonarEnv) {
                            sh "mvn sonar:sonar -Dsonar.projectKey=jtq_java \
                                    -Dsonar.projectName=jtq_java \
                                    -Dsonar.sources=${java_dir} \
                                    -Dsonar.dependencyCheck.reportPath=../../dependency-check-report.xml"
                        }
                    }
                }
            }
        }
        stage('Build image frontend') {
            steps {
                script {
                    def frontImage = docker.build("frontend:${env.BUILD_ID}", "-f ${dockerfile} ./java")
                    frontImage.push()
                }
            }
        }
        stage('Build image backend') {
            steps {
                script {
                    def backImage = docker.build("backend:${env.BUILD_ID}", "-f ${dockerfile} ./angular")
                    backIMage.push()
                }
            }
        }
        stage('Build image reverse_proxy') {
            steps {
                script {
                    def reverseImage = docker.build("reverseImage:${env.BUILD_ID}", "-f ${dockerfile} ./nginx")
                    reverseImage.push()
                }
            }
        }
    }
    
        
}
