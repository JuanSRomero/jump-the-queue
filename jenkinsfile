pipeline {
    agent any
 
    
    environment {
        ang_dir = 'angular'
        java_dir = 'java/jtqj'
        src_dir = 'src'
        //main_dir = 'src/main'
        //test_dir = 'src/test'

        sonarEnv = 'sonarqube' 
        sonarTool = 'sonarqube'
        dockerTool = 'docker'

        imageFront = 'frontend'
        registryCredentials =  'nexus'
        registry = '172.08.0.3:8082/repository/repo'   
        dockerImage = ''
    }
    tools {
        maven 'mvn'
        nodejs 'NodeJs'
    }    
    
    stages {        
        stage('Install dependencies') {
            steps {
                dir(ang_dir){
                    //sh 'yarn --network-timeout 100000'
                    sh 'npm install'
                }
            }
        }
        /*
        stage('SonarQube Analysis Front') {
            steps {
                script {
                    dir(ang_dir) {
                        def scannerHome = tool sonarTool
                        def props = readJSON file: 'package.json'
                        withSonarQubeEnv(sonarEnv) {
                            sh """
                                ${scannerHome}/bin/sonar-scanner -X \
                                    -Dsonar.projectKey=${props.name} \
                                    -Dsonar.projectName=${props.name} \
                                    -Dsonar.projectVersion=${props.version} \
                                    -Dsonar.sources=${src_dir}
                            """
                        }
                    }
                }
            }
        }
        */
        /*
        stage('Build frontend') {
            steps {
                dir(ang_dir){
                    sh 'npm run build'
                }
            }
        }
        */
        /*
        stage('Build backend') {
            steps {
                dir(java_dir){
                    sh 'mvn clean install -Dmaven.test.skip=true'
                    }
                }
            
        }
        stage('Test backend') {
            steps {
                dir(java_dir){
                    sh 'mvn clean test'
                }
            }
        }   
        */
        /*
        stage('SonarQube Analysis Back') {
            steps{
                script{
                    dir(java_dir){
                        withSonarQubeEnv(sonarEnv) {
                            sh "mvn sonar:sonar -e -X -Dsonar.projectKey=jtq_java \
                                    -Dsonar.projectName=jtq_java \
                                    -Dsonar.sources=${main_dir} \
                                    -Dsonar.tests=${test_dir} \
                                    -Dsonar.dependencyCheck.reportPath=../../dependency-check-report.xml"
                        }
                    }
                }
            }
        }*/
        /*
        stage('SonarQube Analysis Back New') {
            steps{
                script{
                    dir(java_dir){
                        withSonarQubeEnv(sonarEnv) {
                            sh "mvn sonar:sonar -Dsonar.dependencyCheck.reportPath=../../dependency-check-report.xml"
                        }
                    }
                }
            }
        }
        */
        stage('Initialize docker'){
            steps{
                script {
                    def dockerHome = tool dockerTool
                    //env.PATH = "${dockerHome}/bin:${env.PATH}"
                }
            }
        }
        stage('Building image') {
            steps{
                script {
                    dir(ang_dir){
                        sh 'docker build .'
                    }
                }
            }
        }
        stage('Uploading to Nexus') {
            steps{  
                script {
                    docker.withRegistry( 'http://'+registry, registryCredentials ) {
                    dockerImage.push('latest')
                    }
                }
            }
        }    
        stage('stop previous containers') {
            steps {
            sh 'docker ps -f name=frontend -q | xargs --no-run-if-empty docker container stop'
            sh 'docker container ls -a -fname=frontend -q | xargs -r docker container rm'
            }
        }
        stage('Docker Run') {
            steps{
                script {
                    sh 'docker run -d -p 80:80 --rm --name frontend ' + registry + imageName
                }
            }
        }    
    }
    
}
    
        
