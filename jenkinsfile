
pipeline {
    agent any
    
    environment {
        ang_dir = 'angular'
        java_dir = 'java/jtqj'
        sonarEnv = "SonarQube"
    }
    tools{
        maven 'mvn'
        nodejs 'NodeJs'
    }
    stages {        
        stage('Build  frontend') {
            steps {
                dir(ang_dir){
                    sh 'yarn --network-timeout 100000'
                    sh 'yarn install'
                    sh 'yarn build --configuration production'
                }
            }
        }
        stage('Test front') {
            steps {
                dir(ang_dir){
                    sh 'ng test'
                    sh 'ng lint'
                }
            }
        }
        stage('SonarQube Analysis Front') {
            steps{
                withSonarQubeEnv(sonarEnv) {
                    sh "mvn/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=jtq"
                }
            }
        }
        stage('Build backend') {
            steps {
                dir(java_dir){
                    sh 'mvn clean install -Dmaven.test.skip=true'
                    }
                }
            
        }
        stage('Test backend') {
            steps {
                dir(java_dir){
                    sh 'mvn clean test'
                }
            }
        }   
        //sonar para front y para back, empezar con el de back
        //front mythaistar (un poco) 

        stage('SonarQube Analysis Back') {
            steps{
                script{
                    dir(java_dir){
                        withSonarQubeEnv(sonarEnv) {
                            sh "mvn sonar:sonar -Dsonar.dependencyCheck.reportPath=../../dependency-check-report.xml"
                        }
                    }
                }
                timeout(time: 1, unit: 'HOURS') {
                    def qg = waitForQualityGate() 
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }
            }
        }
        stage ('Deploy') {
            steps {
                //revisar tool jenkins docker
                //mejor imagenes con el Docker build
                
            }
        }
    }
        
}
